use super::{
    Attestation, ChainSpec, Domain, EthSpec, Fork, Hash256, PublicKey, SecretKey, SelectionProof,
    Signature, SignedRoot,
};
use crate::test_utils::TestRandom;
use serde::{Deserialize, Serialize};
use ssz_derive::{Decode, Encode};
use test_random_derive::TestRandom;
use tree_hash_derive::TreeHash;

/// A validator's aggregate attestation and selection proof.
///
/// This struct represents the data needed for a validator to publish an aggregated attestation
/// to the `beacon_aggregate_and_proof` gossipsub topic.
#[derive(
    arbitrary::Arbitrary,
    Debug,
    Clone,
    PartialEq,
    Serialize,
    Deserialize,
    Encode,
    Decode,
    TestRandom,
    TreeHash,
)]
#[serde(bound = "E: EthSpec")]
#[arbitrary(bound = "E: EthSpec")]
pub struct AggregateAndProof<E: EthSpec> {
    /// The index of the validator that created the attestation.
    #[serde(with = "serde_utils::quoted_u64")]
    pub aggregator_index: u64,
    /// The aggregate attestation.
    pub aggregate: Attestation<E>,
    /// A proof provided by the validator that permits them to publish on the
    /// `beacon_aggregate_and_proof` gossipsub topic.
    pub selection_proof: Signature,
}

impl<E: EthSpec> AggregateAndProof<E> {
    /// Produces a new `AggregateAndProof` with a `selection_proof` generated by signing
    /// `aggregate.data.slot` with `secret_key`.
    ///
    /// If `selection_proof` is `None`, it will be computed locally using `SecretKey`.
    ///
    /// # Parameters
    ///
    /// - `aggregator_index`: The index of the validator creating the aggregate attestation.
    /// - `aggregate`: The aggregate attestation to be included.
    /// - `selection_proof`: Optional proof to allow publication, if not provided it will be
    ///   computed locally.
    /// - `secret_key`: The secret key used for signing.
    /// - `fork`: The current fork version.
    /// - `genesis_validators_root`: The root hash of the genesis validators.
    /// - `spec`: The chain specification.
    ///
    /// # Returns
    ///
    /// A new `AggregateAndProof` instance.
    pub fn from_aggregate(
        aggregator_index: u64,
        aggregate: Attestation<E>,
        selection_proof: Option<SelectionProof>,
        secret_key: &SecretKey,
        fork: &Fork,
        genesis_validators_root: Hash256,
        spec: &ChainSpec,
    ) -> Self {
        let selection_proof = selection_proof
            .unwrap_or_else(|| {
                SelectionProof::new::<E>(
                    aggregate.data.slot,
                    secret_key,
                    fork,
                    genesis_validators_root,
                    spec,
                )
            })
            .into();

        Self {
            aggregator_index,
            aggregate,
            selection_proof,
        }
    }

    /// Returns `true` if `validator_pubkey` signed over `self.aggregate.data.slot`.
    ///
    /// # Parameters
    ///
    /// - `validator_pubkey`: The public key of the validator.
    /// - `fork`: The current fork version.
    /// - `genesis_validators_root`: The root hash of the genesis validators.
    /// - `spec`: The chain specification.
    ///
    /// # Returns
    ///
    /// - `true` if the selection proof is valid for the given validator and slot.
    /// - `false` otherwise.
    pub fn is_valid_selection_proof(
        &self,
        validator_pubkey: &PublicKey,
        fork: &Fork,
        genesis_validators_root: Hash256,
        spec: &ChainSpec,
    ) -> bool {
        let target_epoch = self.aggregate.data.slot.epoch(E::slots_per_epoch());
        let domain = spec.get_domain(
            target_epoch,
            Domain::SelectionProof,
            fork,
            genesis_validators_root,
        );
        let message = self.aggregate.data.slot.signing_root(domain);
        self.selection_proof.verify(validator_pubkey, message)
    }
}

impl<E: EthSpec> SignedRoot for AggregateAndProof<E> {}
